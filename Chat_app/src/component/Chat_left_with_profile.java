/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package component;

import java.awt.Color;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import model.Model_File_Sender;
import model.Model_Receive_File;
import model.Model_Receive_Image;
import model.Model_User_Account;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author mrtru
 */
public class Chat_left_with_profile extends javax.swing.JLayeredPane {

    /**
     * Creates new form Chat_left
     */
    private Model_User_Account user;
    
    public Chat_left_with_profile() {
        initComponents();
        setLayout(new MigLayout("fillx, insets 0", "[32px][grow]", "[bottom]"));
        txt.setBackground(new Color(229,229,229));
    }
    
    
    
    public void setUserProfile(Model_User_Account user){
        this.user = user;
        txt.setUserProfile(user.getUserName());
    }
    
    public void setImageProfile(Model_User_Account user){
        this.user = user;
        if (this.user.getImage().trim().isEmpty() || this.user.getImage() == null) {
            ImageIcon defaultIcon = new ImageIcon(getClass().getResource("/icon/user.png"));
            setAvatarImage(defaultIcon);
        } else {
            setAvatarImageFromBase64(this.user.getImage());
        }

    }
    
    public void setText(String text) {
        if (text.equals("")) {
            txt.hideText();
        } else {
            txt.setText(text);
        }
    }

    public void setImage(Icon... image) {
        // txt.setImage(false, image);
    }

    public void setImage(Model_Receive_Image dataImage) {
        txt.setImage(false, dataImage);
    }

    public void setImage(Model_File_Sender fileSender) {
        txt.setImage(false, fileSender);
    }
    
    public void setFile(Model_Receive_File data) {
        txt.setFile(data);
    }
    
    public void setFile(Model_File_Sender fileSender) {
        txt.setFile(fileSender);
    }

    public void setEmoji(Icon icon) {
        txt.hideText();
        txt.setEmoji(false, icon);
    }

    public void setTime(String time) {
        DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"); // Adjust as needed
        DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("hh:mm a");
        LocalDateTime temp = LocalDateTime.parse(time, inputFormatter);
        String formattedTime = temp.format(outputFormatter);
        txt.setTime(formattedTime);
    }
    
    public void setAvatarImageFromBase64(String base64Image) {
        if (base64Image == null || base64Image.trim().isEmpty()) {
            setAvatarImage(new ImageIcon(getClass().getResource("/icon/user.png"))); // Icon mặc định
            return;
        }

        ImageIcon avatarIcon = decodeBase64ToImage(base64Image);
        if (avatarIcon != null) {
            IAimage.setImage(avatarIcon);
            repaint();
        }
    }
    
    public ImageIcon decodeBase64ToImage(String base64Image) {
        if (base64Image == null || base64Image.trim().isEmpty()) {
            return new ImageIcon(getClass().getResource("/icon/user.png")); // Trả về icon mặc định
        }

        try {
            byte[] imageBytes = Base64.getDecoder().decode(base64Image);
            return new ImageIcon(imageBytes);
        } catch (IllegalArgumentException e) {
            return new ImageIcon(getClass().getResource("/icon/user.png")); // Trả về icon mặc định nếu decode lỗi
        }
    }
    
    public void setAvatarImage(ImageIcon avatarIcon) {
        IAimage.setImage(avatarIcon);
        repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        IAimage = new swing.ImageAvatar();
        txt = new component.Chat_Item();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        IAimage.setBorderSize(0);
        IAimage.setImage(new javax.swing.ImageIcon(getClass().getResource("/icon/user.png"))); // NOI18N
        IAimage.setMaximumSize(new java.awt.Dimension(32, 32));
        IAimage.setMinimumSize(new java.awt.Dimension(32, 32));
        IAimage.setName(""); // NOI18N

        jLayeredPane1.setLayer(IAimage, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(IAimage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(IAimage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        add(jLayeredPane1);
        add(txt);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private swing.ImageAvatar IAimage;
    private javax.swing.JLayeredPane jLayeredPane1;
    private component.Chat_Item txt;
    // End of variables declaration//GEN-END:variables
}
